#!/usr/bin/env python2
# Copyright (c) 2007-2014 Heikki Hokkanen <hoxu@users.sf.net> & others (see doc/AUTHOR)
# GPLv2 / GPLv3
import datetime
import getopt
import glob
import os
import pickle
import shutil
import sys
import time
import zlib
import calendar
import warnings
import itertools
import collections

from jinja2 import Environment, FileSystemLoader
from tools import GitStatistics
from tools import get_external_execution_time, get_pipe_output
from tools import generate_version_from, fetch_contributors_from
from tools.csvreportcreator import CSVReportCreator

os.environ['LC_ALL'] = 'C'

time_start = time.time()

# By default, gnuplot is searched from path, but can be overridden with the
# environment variable "GNUPLOT"
gnuplot_executable = os.environ.get('GNUPLOT', 'gnuplot')

conf = {
    'max_domains': 10,
    'max_ext_length': 10,
    'style': 'gitstats.css',
    'max_authors': 7,
    'max_authors_of_months': 6,
    'authors_top': 5,
    'commit_begin': '',
    'commit_end': 'HEAD',
    'linear_linestats': 1,
    'project_name': '',
    'processes': 8,
    'start_date': '',
    'output':'html'
}


def getlogrange(defaultrange='HEAD', end_only=True):
    commit_range = getcommitrange(defaultrange, end_only)
    if len(conf['start_date']) > 0:
        return '--since="%s" "%s"' % (conf['start_date'], commit_range)
    return commit_range


def getcommitrange(defaultrange='HEAD', end_only=False):
    if len(conf['commit_end']) > 0:
        if end_only or len(conf['commit_begin']) == 0:
            return conf['commit_end']
        return '%s..%s' % (conf['commit_begin'], conf['commit_end'])
    return defaultrange


def getkeyssortedbyvalues(a_dict):
    return [el[1] for el in sorted([(el[1], el[0]) for el in a_dict.items()])]


# dict['author'] = { 'commits': 512 } - ...key(dict, 'commits')
def getkeyssortedbyvaluekey(d, key):
    return [el[1] for el in sorted([(d[el][key], el) for el in d.keys()])]


def get_project_version():
    try:
        with open('VERSION', 'r') as f:
            version_string = f.readline()
    except IOError as e:
        warnings.warn('This is not a release version of the project?: %s' % e)
        import pygit2 as git
        head_commit = git.Repository(os.getcwd()).head.peel()
        version_string = generate_version_from(head_commit)

    return version_string


def get_project_contributors():
    try:
        with open('CONTRIBUTORS', 'r') as f:
            contributors_list = f.readlines()
    except IOError as e:
        warnings.warn('This is not a release version of the project?: %s' % e)
        import pygit2 as git
        repo = git.Repository(os.getcwd())
        head_commit = repo.head.peel()
        contributors_list = fetch_contributors_from(repo, head_commit)

    return contributors_list


def get_jinja_version():
    import jinja2 as j2
    return '{} v.{}'.format(j2.__name__, j2.__version__)


GNUPLOT_VERSION_STRING = None


def get_gnuplot_version():
    global GNUPLOT_VERSION_STRING
    if GNUPLOT_VERSION_STRING is None:
        GNUPLOT_VERSION_STRING = get_pipe_output(['%s --version' % gnuplot_executable]).split('\n')[0]
    return GNUPLOT_VERSION_STRING


class DataCollector:
    """Manages data collection from a revision control repository."""

    def __init__(self):
        self.stamp_created = time.time()
        self.cache = {}

        # name -> {commits, first_commit_stamp, last_commit_stamp, last_active_day, active_days,
        #  lines_added,
        #  lines_removed}
        self.authors = {}

        self.total_commits = 0
        self.total_files = 0
        self.authors_by_commits = 0

        self.files_by_stamp = {}  # stamp -> files

        # extensions
        self.extensions = {}  # extension -> files, lines

    ##
    # This should be the main function to extract data from the repository.
    def collect(self, project_directory):
        self.dir = project_directory
        if not conf['project_name']:
            self.projectname = os.path.basename(os.path.abspath(project_directory))
        else:
            self.projectname = conf['project_name']

    ##
    # Load cacheable data
    def loadCache(self, cachefile):
        if not os.path.exists(cachefile):
            return
        print('Loading cache...')
        f = open(cachefile, 'rb')
        try:
            self.cache = pickle.loads(zlib.decompress(f.read()))
        except:
            # temporary hack to upgrade non-compressed caches
            f.seek(0)
            self.cache = pickle.load(f)
        f.close()

    ##
    # Save cacheable data
    def saveCache(self, cachefile):
        print('Saving cache...')
        tempfile = cachefile + '.tmp'
        f = open(tempfile, 'wb')
        # pickle.dump(self.cache, f)
        data = zlib.compress(pickle.dumps(self.cache))
        f.write(data)
        f.close()
        try:
            os.remove(cachefile)
        except OSError:
            pass
        os.rename(tempfile, cachefile)


class GitDataCollector(DataCollector):
    def collect(self, project_directory):
        DataCollector.collect(self, project_directory)
        self.repo_statistics = GitStatistics(project_directory)

        self.authors = self.repo_statistics.authors
        self.changes_by_date_by_author = self.repo_statistics.author_changes_history

        if 'files_in_tree' not in self.cache:
            self.cache['files_in_tree'] = {}
        revs_cached = []
        revs_to_read = []
        # look up rev in cache and take info from cache if found
        # if not append rev to list of rev to read from repo
        for ts, tree_id in self.repo_statistics.get_revisions():
            # if cache empty then add time and rev to list of new rev's
            # otherwise try to read needed info from cache
            if tree_id in self.cache['files_in_tree'].keys():
                revs_cached.append((ts, self.cache['files_in_tree'][tree_id]))
            else:
                revs_to_read.append((ts, tree_id))

        # update cache with new revisions and append then to general list
        for ts, rev in revs_to_read:
            diff = self.repo_statistics.get_files_info(rev)
            count = len(diff)
            self.cache['files_in_tree'][rev] = count
            revs_cached.append((ts, count))

        for (stamp, files) in revs_cached:
            self.files_by_stamp[stamp] = files
        self.total_commits = len(self.files_by_stamp)

        ext_dat = {}
        for p in self.repo_statistics.get_files_info('HEAD'):
            filename = os.path.basename(p.delta.old_file.path)
            basename_ext = filename.split('.')
            ext = basename_ext[1] if len(basename_ext) == 2 and basename_ext[0] else ''
            if len(ext) > conf['max_ext_length']:
                ext = ''
            if ext not in ext_dat:
                ext_dat[ext] = {'files': 0, 'lines': 0}
            # unclear what first two entries of the tuple mean, for each file they were equal to 0
            _, _, lines_count = p.line_stats
            ext_dat[ext]['lines'] += lines_count
            ext_dat[ext]['files'] += 1
        self.extensions = ext_dat
        self.total_files = sum(v['files'] for k, v in ext_dat.items())

    def refine(self):
        # authors
        # name -> {place_by_commits, date_first, date_last, timedelta}
        self.authors_by_commits = getkeyssortedbyvaluekey(self.authors, 'commits')
        self.authors_by_commits.reverse()  # most first
        for i, name in enumerate(self.authors_by_commits):
            self.authors[name]['place_by_commits'] = i + 1

        for name in self.authors.keys():
            a = self.authors[name]
            date_first = datetime.datetime.fromtimestamp(a['first_commit_stamp'])
            date_last = datetime.datetime.fromtimestamp(a['last_commit_stamp'])
            delta = (date_last - date_first).days
            a['date_first'] = date_first.strftime('%Y-%m-%d')
            a['date_last'] = date_last.strftime('%Y-%m-%d')
            a['timedelta'] = delta
            if 'lines_added' not in a: a['lines_added'] = 0
            if 'lines_removed' not in a: a['lines_removed'] = 0

    def getAuthorInfo(self, author):
        if sys.version_info.major == 2:
            return self.authors[author.encode("utf-8")]
        else:
            return self.authors[author]

    def getAuthors(self, limit=None):
        res = getkeyssortedbyvaluekey(self.authors, 'commits')
        res.reverse()
        return res[:limit]

    def getTotalCommits(self):
        return self.total_commits

    def getTotalFiles(self):
        return self.total_files


class HTMLReportCreator(object):
    recent_activity_period_weeks = 32
    repostat_root_dir = os.path.dirname(os.path.abspath(__file__))

    def __init__(self, repo_stat):
        self.git_repo_statistics = repo_stat

        templates_dir = os.path.join(self.repostat_root_dir, 'templates')
        self.j2_env = Environment(loader=FileSystemLoader(templates_dir), trim_blocks=True)
        self.j2_env.filters['to_month_name_abr'] = lambda im: calendar.month_abbr[im]
        self.j2_env.filters['to_weekday_name'] = lambda i: calendar.day_name[i]
        self.j2_env.filters['to_ratio'] = lambda val, max_val: float(val) / max_val
        self.j2_env.filters['to_percentage'] = lambda val, max_val: 100 * float(val) / max_val
        self.j2_env.filters['to_intensity'] = lambda val, max_val: 127 + int((float(val) / max_val) * 128)

    def _save_recent_activity_data(self, data):
        # generate weeks to show (previous N weeks from now)
        now = datetime.datetime.now()
        weeks = []
        stampcur = now
        for i in range(0, self.recent_activity_period_weeks):
            weeks.insert(0, stampcur.strftime('%Y-%W'))
            stampcur -= datetime.timedelta(7)

        with open(os.path.join(self.path, 'recent_activity.dat'), 'w') as f:
            for i in range(0, self.recent_activity_period_weeks):
                commits = self.git_repo_statistics.recent_activity_by_week.get(weeks[i], 0)
                f.write("%d %d\n" % (self.recent_activity_period_weeks - i - 1, commits))

    def create(self, data, path):
        self.data = data
        self.path = path
        self.title = data.projectname

        # copy static files. Looks in the binary directory, ../share/gitstats and /usr/share/gitstats
        secondarypath = os.path.join(self.repostat_root_dir, '..', 'share', 'gitstats')
        basedirs = [self.repostat_root_dir, secondarypath, '/usr/share/gitstats']
        for asset in (conf['style'], 'sortable.js', 'arrow-up.gif', 'arrow-down.gif', 'arrow-none.gif'):
            for base in basedirs:
                src = os.path.join(base, asset)
                if os.path.exists(src):
                    shutil.copyfile(src, os.path.join(path, asset))
                    break
            else:
                print('Warning: "%s" not found, so not copied (searched: %s)' % (asset, basedirs))

        ###
        # General
        general_html = self.render_general_page(data)
        with open(os.path.join(path, "general.html"), 'w') as f:
            f.write(general_html)

        ###
        # Activity
        activity_html = self.render_activity_page(data)
        with open(os.path.join(path, "activity.html"), 'w') as f:
            f.write(activity_html)

        # Commits by current year's months
        today_date = datetime.date.today()
        current_year = today_date.year
        with open(os.path.join(path, 'commits_by_year_month.dat'), 'w') as fg:
            for month in range(1, 13):
                yymm = datetime.date(current_year, month, 1).strftime("%Y-%m")
                fg.write('%s %s\n' % (yymm, self.git_repo_statistics.monthly_commits_timeline.get(yymm, 0)))

        # Commits by year
        with open(os.path.join(path, 'commits_by_year.dat'), 'w') as fg:
            for yy in sorted(self.git_repo_statistics.yearly_commits_timeline.keys()):
                fg.write('%d %d\n' % (yy, self.git_repo_statistics.yearly_commits_timeline[yy]))

        ###
        # Authors
        authors_html = self.render_authors_page(data)
        with open(os.path.join(path, "authors.html"), 'w') as f:
            if sys.version_info.major == 2:
                f.write(authors_html)
            else:
                f.write(authors_html.decode('utf-8'))

        # cumulated added lines by
        # author. to save memory,
        # changes_by_date_by_author[stamp][author] is defined
        # only at points where author commits.
        # lines_by_authors allows us to generate all the
        # points in the .dat file.
        lines_by_authors = {}

        # Don't rely on getAuthors to give the same order each
        # time. Be robust and keep the list in a variable.
        commits_by_authors = {}

        others_column_name = 'others'
        authors_to_plot = data.getAuthors(conf['max_authors'])
        with open(os.path.join(path, 'lines_of_code_by_author.dat'), 'w') as fgl, \
                open(os.path.join(path, 'commits_by_author.dat'), 'w') as fgc:
            header_row = '"timestamp" ' + ' '.join('"{0}"'.format(w) for w in authors_to_plot) + ' ' \
                         + others_column_name + '\n'
            fgl.write(header_row)
            fgc.write(header_row)
            for stamp in sorted(data.changes_by_date_by_author.keys()):
                fgl.write('%d' % stamp)
                fgc.write('%d' % stamp)
                for author in authors_to_plot:
                    if author in data.changes_by_date_by_author[stamp].keys():
                        lines_by_authors[author] = data.changes_by_date_by_author[stamp][author]['lines_added']
                        commits_by_authors[author] = data.changes_by_date_by_author[stamp][author]['commits']
                    fgl.write(' %d' % lines_by_authors.get(author, 0))
                    fgc.write(' %d' % commits_by_authors.get(author, 0))
                for author in data.changes_by_date_by_author[stamp].keys():
                    if author not in authors_to_plot:
                        lines_by_authors[others_column_name] = lines_by_authors.get(others_column_name, 0) \
                                                               + data.changes_by_date_by_author[stamp][author][
                                                                   'lines_added']
                        commits_by_authors[others_column_name] = commits_by_authors.get(others_column_name, 0) \
                                                                 + data.changes_by_date_by_author[stamp][author][
                                                                     'commits']
                fgl.write(' %d' % lines_by_authors.get(others_column_name, 0))
                fgc.write(' %d' % commits_by_authors.get(others_column_name, 0))
                fgl.write('\n')
                fgc.write('\n')

        # Domains
        domains_by_commits = getkeyssortedbyvaluekey(self.git_repo_statistics.domains, 'commits')
        domains_by_commits.reverse()
        with open(os.path.join(path, 'domains.dat'), 'w') as fp:
            for i, domain in enumerate(domains_by_commits[:conf['max_domains']]):
                info = self.git_repo_statistics.domains[domain]
                fp.write('%s %d %d\n' % (domain, i, info['commits']))

        ###
        # Files
        files_html = self.render_files_page(data)
        with open(os.path.join(path, "files.html"), 'w') as f:
            f.write(files_html)

        with open(os.path.join(path, 'files_by_date.dat'), 'w') as fg:
            for timestamp in sorted(data.files_by_stamp.keys()):
                fg.write('%d %d\n' % (timestamp, data.files_by_stamp[timestamp]))

        with open(os.path.join(path, 'lines_of_code.dat'), 'w') as fg:
            for stamp in sorted(self.git_repo_statistics.changes_history.keys()):
                fg.write('%d %d\n' % (stamp, self.git_repo_statistics.changes_history[stamp]['lines']))

        ###
        # tags.html
        tags_html = self.render_tags_page(data)
        with open(os.path.join(path, "tags.html"), 'w') as f:
            if sys.version_info.major == 2:
                f.write(tags_html)
            else:
                f.write(tags_html.decode('utf-8'))

        ###
        # about.html
        about_html = self.render_about_page()
        with open(os.path.join(path, "about.html"), 'w') as f:
            if sys.version_info.major == 2:
                f.write(about_html)
            else:
                f.write(about_html.decode('utf-8'))

        print('Generating graphs...')
        self.process_gnuplot_scripts(scripts_path=os.path.join(self.repostat_root_dir, 'gnuplot'),
                                     data_path=path,
                                     output_images_path=path)

    def render_general_page(self, data):
        date_format_str = '%Y-%m-%d %H:%M'
        first_commit_datetime = datetime.datetime.fromtimestamp(self.git_repo_statistics.first_commit_timestamp)
        last_commit_datetime = datetime.datetime.fromtimestamp(self.git_repo_statistics.last_commit_timestamp)
        # TODO: this conversion from old 'data' to new 'project data' should perhaps be removed in future
        project_data = {
            "name": data.projectname,
            "age": (last_commit_datetime - first_commit_datetime).days,
            "active_days_count": len(self.git_repo_statistics.active_days),
            "commits_count": data.getTotalCommits(),
            "authors_count": len(self.git_repo_statistics.authors),
            "files_count": data.getTotalFiles(),
            "total_lines_count": self.git_repo_statistics.total_lines_count,
            "added_lines_count": self.git_repo_statistics.total_lines_added,
            "removed_lines_count": self.git_repo_statistics.total_lines_removed,
            "first_commit_date": first_commit_datetime.strftime(date_format_str),
            "last_commit_date": last_commit_datetime.strftime(date_format_str)
        }

        generation_data = {
            "datetime": datetime.datetime.today().strftime(date_format_str),
            "duration": "{0:.3f}".format(time.time() - data.stamp_created)
        }

        # load and render template
        template_rendered = self.j2_env.get_template('general.html').render(
            project=project_data,
            generation=generation_data,
            page_title="General"
        )
        return template_rendered

    def render_activity_page(self, data):
        # TODO: this conversion from old 'data' to new 'project data' should perhaps be removed in future
        project_data = {
            'hourly_activity': [],
            'weekday_hourly_activity': {},
            'weekday_activity': {},
            'timezones_activity': collections.OrderedDict(sorted(self.git_repo_statistics.timezones.items(), key=lambda n: int(n[0]))),
            'month_in_year_activity': self.git_repo_statistics.activity_monthly,
            'weekday_hour_max_commits_count': self.git_repo_statistics.max_weekly_hourly_activity
        }

        self._save_recent_activity_data(data)

        hour_of_day = self.git_repo_statistics.get_hourly_activity()
        for i in range(0, 24):
            if i in hour_of_day:
                project_data['hourly_activity'].append(hour_of_day[i])
            else:
                project_data['hourly_activity'].append(0)

        for weekday in range(len(calendar.day_name)):
            project_data['weekday_hourly_activity'][weekday] = []
            weekday_commits = 0
            for hour in range(0, 24):
                try:
                    commits = self.git_repo_statistics.activity_weekly_hourly[weekday][hour]
                    weekday_commits += commits
                except KeyError:
                    commits = 0
                if commits != 0:
                    project_data['weekday_hourly_activity'][weekday].append(commits)
                else:
                    project_data['weekday_hourly_activity'][weekday].append(commits)
            project_data['weekday_activity'][weekday] = weekday_commits

        # load and render template
        template_rendered = self.j2_env.get_template('activity.html').render(
            project=project_data,
            page_title="Activity"
        )
        return template_rendered

    def render_authors_page(self, data):
        # TODO: this conversion from old 'data' to new 'project data' should perhaps be removed in future
        project_data = {
            'top_authors': [],
            'non_top_authors': [],
            'total_commits_count': data.getTotalCommits()
        }

        all_authors = data.getAuthors()
        if sys.version_info.major == 2:
            all_authors = [author.decode('utf-8') for author in all_authors]
        else:
            all_authors = [author for author in all_authors]
        if len(all_authors) > conf['max_authors']:
            rest = all_authors[conf['max_authors']:]
            project_data['non_top_authors'] = rest

        project_data['months'] = []
        # print out only recent conf['max_authors_of_months'] authors of the month
        iter_months_with_authors = reversed(sorted(self.git_repo_statistics.author_of_month.keys()))
        for yymm in itertools.islice(iter_months_with_authors, conf['max_authors_of_months']):
            authordict = self.git_repo_statistics.author_of_month[yymm]
            authors = getkeyssortedbyvalues(authordict)
            authors.reverse()
            commits = self.git_repo_statistics.author_of_month[yymm][authors[0]]
            next = ', '.join(authors[1:conf['authors_top'] + 1])

            if sys.version_info.major == 2:
                month_dict = {
                    'date': yymm,
                    'top_author': {'name': authors[0].decode('utf-8'), 'commits_count': commits},
                    'next_top_authors': next.decode('utf-8'),
                    'all_commits_count': self.git_repo_statistics.monthly_commits_timeline[yymm]
                }
            else:
                month_dict = {
                    'date': yymm,
                    'top_author': {'name': authors[0], 'commits_count': commits},
                    'next_top_authors': next,
                    'all_commits_count': self.git_repo_statistics.monthly_commits_timeline[yymm]
                }

            project_data['months'].append(month_dict)

        project_data['years'] = []
        for yy in reversed(sorted(self.git_repo_statistics.author_of_year.keys())):
            authordict = self.git_repo_statistics.author_of_year[yy]
            authors = getkeyssortedbyvalues(authordict)
            authors.reverse()
            commits = self.git_repo_statistics.author_of_year[yy][authors[0]]
            next = ', '.join(authors[1:conf['authors_top'] + 1])

            if sys.version_info.major == 2:
                year_dict = {
                    'date': yy,
                    'top_author': {'name': authors[0].decode('utf-8'), 'commits_count': commits},
                    'next_top_authors': next.decode('utf-8'),
                    'all_commits_count': self.git_repo_statistics.yearly_commits_timeline[yy]
                }
            else:
                year_dict = {
                    'date': yy,
                    'top_author': {'name': authors[0], 'commits_count': commits},
                    'next_top_authors': next,
                    'all_commits_count': self.git_repo_statistics.yearly_commits_timeline[yy]
                }

            project_data['years'].append(year_dict)

        for author in all_authors[:conf['max_authors']]:
            info = data.getAuthorInfo(author)
            author_dict = {
                'name': author,
                'commits_count': info['commits'],
                'lines_added_count': info['lines_added'],
                'lines_removed_count': info['lines_removed'],
                'first_commit_date': info['date_first'],
                'latest_commit_date': info['date_last'],
                'contributed_days_count': info['timedelta'],
                'active_days_count': len(info['active_days']),
            }

            project_data['top_authors'].append(author_dict)

        # load and render template
        template_rendered = self.j2_env.get_template('authors.html').render(
            project=project_data,
            page_title="Authors"
        )
        return template_rendered.encode('utf-8')

    def render_files_page(self, data):
        # TODO: this conversion from old 'data' to new 'project data' should perhaps be removed in future
        project_data = {
            'files_count': data.getTotalFiles(),
            'lines_count': self.git_repo_statistics.total_lines_count,
            'size': self.git_repo_statistics.get_total_size(),
            'files': []
        }

        for ext in sorted(data.extensions.keys()):
            files = data.extensions[ext]['files']
            lines = data.extensions[ext]['lines']
            file_type_dict = {"extension": ext,
                              "count": files,
                              "lines_count": lines
                              }
            project_data['files'].append(file_type_dict)

        # load and render template
        template_rendered = self.j2_env.get_template('files.html').render(
            project=project_data,
            page_title="Files"
        )
        return template_rendered

    def render_tags_page(self, data):
        # TODO: this conversion from old 'data' to new 'project data' should perhaps be removed in future
        project_data = {
            'tags_count': len(self.git_repo_statistics.tags),
            'tags': []
        }

        # TODO: fix error occuring when a tag name and project name are the same
        """
        fatal: ambiguous argument 'gitstats': both revision and filename
        Use '--' to separate paths from revisions, like this:
        'git <command> [<revision>...] -- [<file>...]'
        """

        # TODO: refactor the following code
        tags_sorted_by_date_desc = [el[1] for el in reversed(sorted([(el[1]['date'], el[0]) for el in self.git_repo_statistics.tags.items()]))]
        for tag in tags_sorted_by_date_desc:
            # there are tags containing no commits
            if 'authors' in self.git_repo_statistics.tags[tag].keys():
                authorinfo = []
                authors_by_commits = getkeyssortedbyvalues(self.git_repo_statistics.tags[tag]['authors'])
                for i in reversed(authors_by_commits):
                    authorinfo.append('%s (%d)' % (i, self.git_repo_statistics.tags[tag]['authors'][i]))
                tag_dict = {
                    'name': tag,
                    'date': self.git_repo_statistics.tags[tag]['date'],
                    'commits_count': self.git_repo_statistics.tags[tag]['commits'],
                    'authors': ', '.join(authorinfo)
                }
                project_data['tags'].append(tag_dict)

        # load and render template
        template_rendered = self.j2_env.get_template('tags.html').render(
            project=project_data,
            page_title="Tags"
        )
        return template_rendered.encode('utf-8')

    def render_about_page(self):
        if sys.version_info.major == 2:
            page_data = {
                "url": "https://github.com/vifactor/repostat",
                "version": get_project_version(),
                "tools": [GitStatistics.get_fetching_tool_info(),
                          get_jinja_version(),
                          get_gnuplot_version()],
                "contributors": [author.decode('utf-8') for author in get_project_contributors()]
            }
        else:
            page_data = {
                "url": "https://github.com/vifactor/repostat",
                "version": get_project_version(),
                "tools": [GitStatistics.get_fetching_tool_info(),
                          get_jinja_version(),
                          get_gnuplot_version()],
                "contributors": [author for author in get_project_contributors()]
            }

        template_rendered = self.j2_env.get_template('about.html').render(
            repostat=page_data,
            page_title="About"
        )
        return template_rendered.encode('utf-8')

    @staticmethod
    def process_gnuplot_scripts(scripts_path, data_path, output_images_path):
        scripts = glob.glob(os.path.join(scripts_path, '*.plot'))
        os.chdir(output_images_path)
        for script in scripts:
            gnuplot_command = '%s -e "data_folder=\'%s\'" "%s"' % (gnuplot_executable, data_path, script)
            out = get_pipe_output([gnuplot_command])
            if len(out) > 0:
                print(out)


def usage():
    print("""
Usage: gitstats [options] <gitpath..> <outputpath>

Options:
-c key=value     Override configuration value

Default config values:
%s

output option values: [html,csv]
Please see the manual page for more details.
""" % conf)


class GitStats:
    optlist = None
    args = None

    def isHtmlOutput(self) -> bool:
        return conf['output'] == 'html'

    def isCsvOutput(self) -> bool:
        return conf['output'] == 'csv'

    def processAndValidateParams(self, args_orig):
        if sys.version_info < (2, 6):
            warnings.warn("Python 2.6+ is required for repostat")
            sys.exit(1)

        if not get_gnuplot_version():
            warnings.warn('gnuplot not found')
            sys.exit(1)

        optlist, args = getopt.getopt(args_orig, 'hc:', ["help"])
        for o, v in optlist:
            if o == '-c':
                key, value = v.split('=', 1)
                if key not in conf:
                    raise KeyError('no such key "%s" in config' % key)
                if isinstance(conf[key], int):
                    conf[key] = int(value)
                else:
                    conf[key] = value
            elif o in ('-h', '--help'):
                usage()
                sys.exit()

        if len(args) < 2 :
            usage()
            sys.exit(0)
        
        if (not self.isCsvOutput() and not self.isHtmlOutput()):
            print('Invalid output parameter: %s' % conf['output'])
            usage()
            sys.exit(0)

        outputpath = os.path.abspath(args[-1])
        try:
            os.makedirs(outputpath)
        except OSError:
            pass
        if not os.path.isdir(outputpath):
            warnings.warn('FATAL: Output path is not a directory or does not exist: %s' % outputpath)
            sys.exit(1)
        
        self.args = args
        self.optlist = optlist

        return optlist, args


    def run(self, args_orig):

        self.processAndValidateParams(args_orig)

        outputpath = os.path.abspath(self.args[-1])
        rundir = os.getcwd()

        print('Output path: %s' % outputpath)
        cachefile = os.path.join(outputpath, 'gitstats.cache')

        data = GitDataCollector()
        data.loadCache(cachefile)

        for gitpath in self.args[0:-1]:
            print('Git path: %s' % gitpath)

            prevdir = os.getcwd()
            os.chdir(gitpath)

            print('Collecting data...')
            data.collect(gitpath)

            os.chdir(prevdir)

        print('Refining data...')
        # data.saveCache(cachefile)
        data.refine()

        os.chdir(rundir)
        print('Generating report...')
        # fixme: pass GitStatistics object directly when obsolete GitDataCollector is removed
        if self.isHtmlOutput():
            print('Generating HTML report...')
            report = HTMLReportCreator(data.repo_statistics)
            report.create(data, outputpath)
        elif self.isCsvOutput():
            print('Generating CSV report...')
            report = CSVReportCreator()
            report.create(data.repo_statistics, outputpath, conf)
        else:
            print('Invalid output parameter: %s' % conf['output'])

        time_end = time.time()
        exectime_internal = time_end - time_start
        exectime_external = get_external_execution_time()
        print('Execution time %.5f secs, %.5f secs (%.2f %%) in external commands)' \
              % (exectime_internal, exectime_external, (100.0 * exectime_external) / exectime_internal))
        if sys.stdin.isatty() and self.isHtmlOutput():
            print('You may now run:')
            print('')
            print('   sensible-browser \'%s\'' % os.path.join(outputpath, 'general.html').replace("'", "'\\''"))
            print('')


if __name__ == '__main__':
    g = GitStats()
    g.run(sys.argv[1:])
